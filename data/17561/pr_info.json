{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 36,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "pechersky"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Before, we had\r\n```\r\n[hK : NormedField K] (h : IsNonarchimedean (norm : K → ℝ))\r\n```\r\nNow we use `[hK : NormedField K] [IsUltrametricDist K]` to convert between ultrametrically normed fields and valued fields.\r\nThis allows the instance to be a scoped instance instead of a def, since `IsUltrametricDist` is a class on the type, as opposed to a plain prop about the norm of the type.\r\nThe instance is scoped because otherwise, one gets a TC loop.\r\n\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6PG81r",
              "body": "### PR summary [ad45af2b62](https://github.com/leanprover-community/mathlib4/pull/17561/commits/ad45af2b627f17960b3e378af9416d5caa6b5ddc)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Topology.Algebra.Valued.NormedValued | 1411 | 1413 | +2 (+0.14%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Topology.Algebra.Valued.NormedValued`|2|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_valuation_eq_rankOne_hom_comp_valuation`\n`+ instance : IsUltrametricDist L`\n`+ instance {K : Type*} [NontriviallyNormedField K] [IsUltrametricDist K] :`\n`+ isNonarchimedean_norm`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-10-08T23:03:31Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PKmAX",
              "body": "> That doesn't work well for defining a valuation or the data of a `Valued`.\r\n\r\nCould you explain what you mean by this? I have been successfully using the existing version.",
              "createdAt": "2024-10-09T10:19:32Z",
              "author": {
                "login": "mariainesdff"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PRAAz",
              "body": "Consider my PR on proving that locally compact iff complete and DVR of the valuation ring and finite residue field. To talk about the valuation ring `Valued.integer`, I need a `Valued` in the TC. This is easier to provide to the TC table by a TC-implicit argument `[IsUltrametricDist X]` than an explicit `(h : IsNonarchimedean norm)`. If it is an explicit argument, then there is no way to create the scoped instance -- an explicit argument of the proof about the norm is not available to TC synthesis.\r\n\r\nhttps://github.com/leanprover-community/mathlib4/pull/16733/files#diff-e2953739e89168dcbb0040fe18b7996a54734ee000cfa73813c6a324d3c2f8a9R26-R37",
              "createdAt": "2024-10-09T23:12:33Z",
              "author": {
                "login": "pechersky"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pefim",
              "body": "> If it is an explicit argument, then there is no way to create the scoped instance -- an explicit argument of the proof about the norm is not available to TC synthesis.\r\n\r\nBut you could still create a local instance where you need it, instead of a scoped one, right? That is what I did for example to get the `Valued` structure on `Q_p^alg`:\r\n```lean\r\ninstance valuedField : Valued (QPAlg p) ℝ≥0 :=\r\n  NormedField.toValued (QPAlg.isNonarchimedean p)\r\n```\r\n\r\nIn any case, I am not against these changes now that `IsUltrametricDist` is available, but I would change the PR comment - you could get the `Valued` data before; the comment should instead explain that the problem was to make it a scoped instance instead of just a def.",
              "createdAt": "2024-10-11T10:40:18Z",
              "author": {
                "login": "mariainesdff"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pgg2A",
              "body": "For a concrete field, you'd be able to make the local instance, but lemma wouldn't work for an arbitrary field because there is no` [Fact (IsNonarchimedean ...)]` in the TC context. I'll update the comment.",
              "createdAt": "2024-10-11T15:35:46Z",
              "author": {
                "login": "pechersky"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "ad45af2b627f17960b3e378af9416d5caa6b5ddc",
                "additions": 36,
                "deletions": 5,
                "committedDate": "2024-10-08T23:01:52Z",
                "author": {
                  "name": "Yakov Pechersky",
                  "email": "ffxen158@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4GcWw",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095407/job/31264447579"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4GcNA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095400/job/31264447540"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4GcRA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095406/job/31264447556"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FQRA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428100"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FQPQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264428093"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4GdQA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095402/job/31264447808"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FRyA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428488"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FRoQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264428449"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4GceQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095402/job/31264447609"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FRBQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428293"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FQ6w",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264428267"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4FSjg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428686"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4XHzg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264720846"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4Gsgg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31264451714"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHR4Hkng",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17561&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-10-08T23:02:46Z",
        "deletions": 5,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Topology/Algebra/Valued/NormedValued.lean",
              "additions": 36,
              "deletions": 5
            }
          ]
        },
        "headRefName": "pechersky/normed-valued-ultrametric",
        "headRefOid": "ad45af2b627f17960b3e378af9416d5caa6b5ddc",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5-Aamc",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "name": "t-topology"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
              "name": "t-analysis"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 17561,
        "potentialMergeCommit": {
          "oid": "99dfafd3cb283c4a5e1521d3d50417c6f3be6fcc"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjg4NTM2NDkz",
                "login": "mariainesdff"
              }
            },
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM0Mzk2ODg=",
                "login": "loefflerd"
              }
            }
          ]
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjUzNDIwODY=",
              "login": "pechersky"
            },
            {
              "id": "MDQ6VXNlcjg4NTM2NDkz",
              "login": "mariainesdff"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4GcWw",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095407/job/31264447579"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4GcNA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095400/job/31264447540"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4GcRA",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095406/job/31264447556"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FQRA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428100"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FQPQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264428093"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4GdQA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095402/job/31264447808"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FRyA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428488"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FRoQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264428449"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4GceQ",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245095402/job/31264447609"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FRBQ",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428293"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FQ6w",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264428267"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4FSjg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088377/job/31264428686"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4XHzg",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11245088403/job/31264720846"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4Gsgg",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31264451714"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHR4Hkng",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17561&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "chore(Topology/Algebra/Valued/NormedValued): rely on TC IsUltrametricDist instead of explicit arg",
        "updatedAt": "2024-10-11T15:36:52Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/17561",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6ZcfGvzwAAAANkEWXo",
              "createdAt": "2024-10-08T23:02:52Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjg4NTM2NDkz",
                "login": "mariainesdff"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6ZcfGvzwAAAANkEWhR",
              "createdAt": "2024-10-08T23:02:58Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM0Mzk2ODg=",
                "login": "loefflerd"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZcfGvzwAAAANkEW5T",
              "createdAt": "2024-10-08T23:03:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
                "name": "t-analysis"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZcfGvzwAAAANkEW5a",
              "createdAt": "2024-10-08T23:03:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PG81r",
              "createdAt": "2024-10-08T23:03:31Z",
              "body": "### PR summary [ad45af2b62](https://github.com/leanprover-community/mathlib4/pull/17561/commits/ad45af2b627f17960b3e378af9416d5caa6b5ddc)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Topology.Algebra.Valued.NormedValued | 1411 | 1413 | +2 (+0.14%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Topology.Algebra.Valued.NormedValued`|2|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_valuation_eq_rankOne_hom_comp_valuation`\n`+ instance : IsUltrametricDist L`\n`+ instance {K : Type*} [NontriviallyNormedField K] [IsUltrametricDist K] :`\n`+ isNonarchimedean_norm`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZcfGvzwAAAANkEYFV",
              "createdAt": "2024-10-08T23:04:00Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PKmAX",
              "createdAt": "2024-10-09T10:19:32Z",
              "body": "> That doesn't work well for defining a valuation or the data of a `Valued`.\r\n\r\nCould you explain what you mean by this? I have been successfully using the existing version.",
              "author": {
                "login": "mariainesdff"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PRAAz",
              "createdAt": "2024-10-09T23:12:33Z",
              "body": "Consider my PR on proving that locally compact iff complete and DVR of the valuation ring and finite residue field. To talk about the valuation ring `Valued.integer`, I need a `Valued` in the TC. This is easier to provide to the TC table by a TC-implicit argument `[IsUltrametricDist X]` than an explicit `(h : IsNonarchimedean norm)`. If it is an explicit argument, then there is no way to create the scoped instance -- an explicit argument of the proof about the norm is not available to TC synthesis.\r\n\r\nhttps://github.com/leanprover-community/mathlib4/pull/16733/files#diff-e2953739e89168dcbb0040fe18b7996a54734ee000cfa73813c6a324d3c2f8a9R26-R37",
              "author": {
                "login": "pechersky"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Pefim",
              "createdAt": "2024-10-11T10:40:18Z",
              "body": "> If it is an explicit argument, then there is no way to create the scoped instance -- an explicit argument of the proof about the norm is not available to TC synthesis.\r\n\r\nBut you could still create a local instance where you need it, instead of a scoped one, right? That is what I did for example to get the `Valued` structure on `Q_p^alg`:\r\n```lean\r\ninstance valuedField : Valued (QPAlg p) ℝ≥0 :=\r\n  NormedField.toValued (QPAlg.isNonarchimedean p)\r\n```\r\n\r\nIn any case, I am not against these changes now that `IsUltrametricDist` is available, but I would change the PR comment - you could get the `Valued` data before; the comment should instead explain that the problem was to make it a scoped instance instead of just a def.",
              "author": {
                "login": "mariainesdff"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Pgg2A",
              "createdAt": "2024-10-11T15:35:46Z",
              "body": "For a concrete field, you'd be able to make the local instance, but lemma wouldn't work for an arbitrary field because there is no` [Fact (IsNonarchimedean ...)]` in the TC context. I'll update the comment.",
              "author": {
                "login": "pechersky"
              }
            }
          ]
        }
      }
    }
  }
}

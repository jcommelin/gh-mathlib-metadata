{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 352,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            }
          ]
        },
        "author": {
          "login": "smmercuri"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR contains the following:\r\n\r\n- Type synonym `WithAbs` which equips a semiring with an absolute value. This approach is used in order to handle ambiguities arising from multiple sources of instances. In particular, each real absolute value on a field `K` defines a `NormedField` structure (and therefore a `MetricSpace` and `UniformSpace` structure), which is ultimately required to apply the `UniformSpace.Completion` operation on `K` to define the infinite place completion. Defining a type synonym of `K` which depends on an absolute value, and then assigning instances to the type synonym, is one approach of allowing the inference system to automatically infer instances which depend on absolute values. In particular, it means we do not have to keep telling the system which instances we mean through the use of `letI := ... ` or `@`.\r\n- The completion `AbsoluteValue.completion` of a field equipped with a real absolute value.\r\n- The completion `NumberField.InfinitePlace.completion` of a number field at an infinite place, which is derived from `AbsoluteValue.completion` as `InfinitePlace` is a subtype of `AbsoluteValue`.\r\n- Proofs that if an infinite place of a number field is real/complex then the resultant completion is isomorphic to the real/complex numbers.\r\n\r\ncf. #13577 for previous feedback\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 6,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6K2Srb",
              "body": "### PR summary [d623f29dd9](https://github.com/leanprover-community/mathlib4/pull/16483/commits/d623f29dd91621651192fb8faf5a41cee034d38f)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.NumberTheory.NumberField.Completion`|2018|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ WithAbs`\n`+ abs_eq_comp`\n`+ abs_of_isReal_eq_comp`\n`+ bijective_extensionEmbedding_of_isComplex`\n`+ bijective_extensionEmbedding_of_isReal`\n`+ closedEmbedding_extensionEmbedding_of_comp`\n`+ dist_of_comp`\n`+ extensionEmbedding`\n`+ extensionEmbedding_coe`\n`+ extensionEmbedding_dist_eq_of_comp`\n`+ extensionEmbedding_of_comp`\n`+ extensionEmbedding_of_comp_coe`\n`+ extensionEmbedding_of_isReal`\n`+ extensionEmbedding_of_isReal_coe`\n`+ extensionHom_coe`\n`+ fieldRange_eq_top_iff`\n`+ instance : Algebra K v.completion`\n`+ instance : Coe K v.completion`\n`+ instance : Inhabited (WithAbs v) := ⟨0⟩`\n`+ instance : NormedField v.completion`\n`+ isClosed_image_extensionEmbedding`\n`+ isClosed_image_extensionEmbedding_of_isReal`\n`+ isometryEquiv_complex_of_isComplex`\n`+ isometryEquiv_real_of_isReal`\n`+ isometry_extensionEmbedding`\n`+ isometry_extensionEmbedding_of_comp`\n`+ isometry_extensionEmbedding_of_isReal`\n`+ isometry_of_comp`\n`+ mem_fieldRange_self`\n`+ normedField`\n`+ pseudoMetricSpace_induced_of_comp`\n`+ ringEquiv_complex_of_isComplex`\n`+ ringEquiv_real_of_isReal`\n`+ subfield_ne_real_of_isComplex`\n`+ surjective_extensionEmbedding_of_isComplex`\n`+ surjective_extensionEmbedding_of_isReal`\n`+ toNormedField`\n`+ uniformInducing_of_comp`\n`+ uniformSpace_eq_comap_of_comp`\n`++ completion`\n`++ locallyCompactSpace`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-09-04T16:17:49Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6MnHrY",
              "body": "> Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n\r\nThere was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?",
              "createdAt": "2024-09-18T17:44:55Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6MrmWQ",
              "body": "> > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> \r\n> There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n\r\nWell, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?",
              "createdAt": "2024-09-19T07:48:08Z",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M2Oxe",
              "body": "> > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > \r\n> > \r\n> > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> \r\n> Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n\r\nYes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me,  although I'm happy to discuss further!",
              "createdAt": "2024-09-20T07:33:47Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M2P9e",
              "body": "> > > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > > \r\n> > > \r\n> > > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> > \r\n> > \r\n> > Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n> \r\n> Yes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me, although I'm happy to discuss further!\r\n\r\n\r\nWell, we certainly prefer neat code ;-) So I'd like to understand better if your `@` business can be avoided by some fine use of the tools at our disposal, of there is really something deep going on. I do not have anything agains your `WithAbs` approach, but if a unified one can be used for both the archimedean and the non-archimedean situation, that would be preferable. ",
              "createdAt": "2024-09-20T07:36:51Z",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M2SIY",
              "body": "> > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> \r\n> There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n\r\nBTW Can you link to the specific point of the long thread of discussions in that PR where this has been discussed? Just to avoid you repeating old arguments...",
              "createdAt": "2024-09-20T07:42:07Z",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M2oCu",
              "body": "> > > > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > > > \r\n> > > > \r\n> > > > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> > > \r\n> > > \r\n> > > Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n> > \r\n> > \r\n> > Yes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me, although I'm happy to discuss further!\r\n> \r\n> Well, we certainly prefer neat code ;-) So I'd like to understand better if your `@` business can be avoided by some fine use of the tools at our disposal, of there is really something deep going on. I do not have anything agains your `WithAbs` approach, but if a unified one can be used for both the archimedean and the non-archimedean situation, that would be preferable.\r\n\r\nIt seems to me that it helps to think about `v`-adic valuations as discrete integer-valued multiplicative valuations, instead of real absolute values, since e.g. then we don't need to make a choice of base (probably there are better reasons!). But, since this is not possible for the infinite places, to fully unify them we could turn a `v`-adic valuation into a `v`-adic absolute value, then we might use `AbsoluteValue.completion` for both the finite and infinite places. But that sounds like a lot of refactoring for the `adicCompletion` API, and I imagine there's a lot of material from the `Valued` API that is made use of for `adicCompletion` and is not available for `AbsoluteValue`. ",
              "createdAt": "2024-09-20T08:14:17Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M2q1u",
              "body": "> > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > \r\n> > \r\n> > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> \r\n> BTW Can you link to the specific point of the long thread of discussions in that PR where this has been discussed? Just to avoid you repeating old arguments...\r\n\r\nOh yes sorry, I think around [Andrew's suggestion](https://github.com/leanprover-community/mathlib4/pull/13577#issuecomment-2158320382) although looking back it seems like the main point of agreement was abstracting to `AbsoluteValue` rather than the use of `WithAbs` itself.",
              "createdAt": "2024-09-20T08:17:21Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M3r99",
              "body": "> > > > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > > > \r\n> > > > \r\n> > > > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> > > \r\n> > > \r\n> > > Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n> > \r\n> > \r\n> > Yes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me, although I'm happy to discuss further!\r\n> \r\n> Well, we certainly prefer neat code ;-) So I'd like to understand better if your `@` business can be avoided by some fine use of the tools at our disposal, of there is really something deep going on. I do not have anything agains your `WithAbs` approach, but if a unified one can be used for both the archimedean and the non-archimedean situation, that would be preferable.\r\n\r\nOh no, you're right. Forget my suggestion to use `Valuation`. But I guess that the main point we were trying to make with @riccardobrasca is that in the same vein as [Valued.mk'](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued.mk') associates a valued structure to a Valuation, it seems that simply creating a `NormedRing.mk` that takes an absolute value and creates a normed ring might be a good solution. At least, it works very well in the nonarchimedean setting, _mutatis mutandis._ The rest of your PR would be hardly modified, I guess.",
              "createdAt": "2024-09-20T10:35:29Z",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6M6tlx",
              "body": "I think I understand! In the latest commit I have done the following:\r\n- Defined `def normedField` inside the `AbsoluteValue` namespace in a separate file that takes an `AbsoluteValue` and returns a `NormedField` class -- I think this is neater and makes the `NormedField` construction available for other usage, so thanks for the suggestion @riccardobrasca !\r\n- Removed the `NormedRing` and `NormOneClass` instances. I did not replace these with `def` versions in the `AbsoluteValue` namespace, because I realised I don't actually need them. Let me know if you think I should add them anyway for completeness -- I guess `NormedRing` is the lowest possible level for `AbsoluteValue`.\r\n- I have kept the usage of `WithAbs` and included a paragraph in the documentation to explain a bit about this approach. If we remove it then we will need to use `@` (like the [non-Archimedean case](https://github.com/leanprover-community/mathlib4/blob/6dcd0d943385f315b956fc76968c842a3ad4072c/Mathlib/RingTheory/DedekindDomain/AdicValuation.lean#L365)) or `letI := ...`, which I had in the old PR. I do not know personally which is preferred, but the type synonym leads to shorter constructions I guess!\r\n- Also updated the PR description.",
              "createdAt": "2024-09-20T17:35:35Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OUTNg",
              "body": "On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n\r\nPerhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n\r\n\r\n\r\nAny thoughts on this @riccardobrasca ?",
              "createdAt": "2024-10-02T05:57:52Z",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OU0pw",
              "body": "> On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n> \r\n> Perhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n> \r\n> Any thoughts on this @riccardobrasca ?\r\n\r\nI think that in Lean4 we prefer structure (even with only one field given by a term of type `R`) to avoid type leakage (meaning that sometimes Lean still see instances of the first type). Anyway my concern was mainly about not having a different solution for valuations and absolute values.",
              "createdAt": "2024-10-02T07:41:13Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OgGC8",
              "body": "> On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n> \r\n> Perhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n> \r\n> Any thoughts on this @riccardobrasca ?\r\n\r\nThanks for the review! Yes I think the structure approach would also work, so I will give it a try ",
              "createdAt": "2024-10-03T08:04:43Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OwbbB",
              "body": "> On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n> \r\n\r\nI'm not sure if this is what you had in mind, but I tried this as the following\r\n```\r\nstructure AbsoluteValued (R S : Type*) [Semiring R] [OrderedSemiring S]\r\n    where\r\n  abs : AbsoluteValue R S\r\n  value : R\r\n```\r\nBut it's not clear to me where to go from here with such a structure. I think `class` might be better because it should extend `Semiring` and `NormedField`, so that it has access to these instances I think? I have not interacted much with `structure` so this is probably my ignorance at play here. \r\n\r\nI think it might be helpful to make a more concrete analogy to the non-Archimedean case to clarify the options here. In the non-Archimedean case we want to use the [`Valued`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued) class which carries the `UniformSpace` structure we are interested in, but this has a distinguished valuation whereas we have multiple valuations. So there is a constructor [`Valued.mk'`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued.mk') which constructs the `Valued` instance when there is no preferred valuation/uniform structure. Then a `def` is made for [`adicValued`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/DedekindDomain/AdicValuation.html#IsDedekindDomain.HeightOneSpectrum.adicValued) which carries these `Valued` instances. In particular, [`adicCompletion`](https://github.com/leanprover-community/mathlib4/blob/3ca1060d7e48260d1b1b7a0733f887e455455226/Mathlib/RingTheory/DedekindDomain/AdicValuation.lean#L365-L366) calls `adicValued.toUniformSpace` using the `@` operator.\r\n\r\nNow for the Archimedean case, the [`NormedField`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Normed/Field/Basic.html#NormedField) class plays the role of `Valued`. Again this has a distinguished norm, so we want a way of creating an instance for non-distinguished norms (or absolute values in this case). I think there are two main options here: (1) in analogy to non-Arch. case we create a `NormedField.mk'` constructor taking an absolute value and giving a `NormedField` instance, assign this to a `def`, then use `@` operators as appropriate; (2) create a type synonym that depends on absolute values, in order to assign the `NormedField` instance as in this PR. It's not clear to me where a new structure fits in to these options. \r\n\r\nBy the way, I did not realise this but those `inferInstanceAs` can actually just be deleted with the type synonym approach as well (except for `Coe` I think).\r\n\r\n> Perhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n> \r\nI agree with a previous comment that the use of \"equip\" is misleading in the documentation, and I can see where the scepticism is coming from! My guiding principle for using a type synonym is less about \"equipping\" the ring with an absolute value, but really more about providing a mechanism for type class inferencing to handle non-preferential instances without using the `@` operator. So actually I do want to create another copy of a ring, but one that explicitly depends on an absolute value, so that I can sensibly assign instances that depend on absolute values to it. I think I'm arguing that the `NormedField` and `Valued` classes provide the \"bundling\" mechanisms, and the `Valued.mk'` and `WithAbs` are two different ways of making that bundling mechanism non-preferential. There is at least some precedence for doing this with type synonyms in [WithLp](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Normed/Lp/WithLp.html#The-WithLp-type-synonym), which does something very similar for the $L^p$ norm -- maybe it would be helpful to separate `WithAbs` into a more developed API like this?",
              "createdAt": "2024-10-05T13:32:07Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OwdQn",
              "body": "Actually, this [`WithIdeal`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Nonarchimedean/AdicTopology.html#WithIdeal) class looks very relevant -- maybe the \"structure\" approach would indeed work if we have it as a class.",
              "createdAt": "2024-10-05T13:57:17Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Oxplo",
              "body": "> Actually, this [`WithIdeal`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Nonarchimedean/AdicTopology.html#WithIdeal) class looks very relevant -- maybe the \"structure\" approach would indeed work if we have it as a class.\r\n\r\nHave played around with this idea, and something like this would work:\r\n```\r\nclass WithAbs (R S : Type*) [Semiring R] [OrderedSemiring S] where \r\n  v : AbsoluteValue R S\r\n\r\nvariable {K : Type*} [Field K] [WithAbs K ℝ]\r\n\r\ninstance normedField : NormedField K :=\r\n  v.toNormedField\r\n\r\nabbrev AbsoluteValue.completion := UniformSpace.Completion K\r\n```\r\nI do later run into inference snags when passing from `AbsoluteValue` to `InfinitePlace`, and then something like this is required:\r\n```\r\n/-- The completion of a number field at an infinite place. -/\r\nabbrev InfinitePlace.completion := letI := WithAbs.mk v.1; AbsoluteValue.completion K\r\n```\r\nFor some reason doing `instance : WithAbs K ℝ := WithAbs.mk v.1` before this does not work (probably because it depends on `v`?). I did not go further, but I think from this point on I will have to do a bunch of sign-posting for the inference system to know what's going on. \r\n\r\nStill, I think this would work as a third option. It's maybe less smooth with respect to inferencing than the type synonym approach, but if there are benefits (e.g., type leakage) then we should discuss whether this approach would be better.",
              "createdAt": "2024-10-06T10:14:23Z",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Ox2g8",
              "body": "Great, thank you so much! I will not have time to dig into this today, but you raised many questions and all of them are interesting, so I will take a little bit to think about all of them and answer properly. It should not take too long.",
              "createdAt": "2024-10-06T13:03:50Z",
              "author": {
                "login": "faenuccio"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "1faf28e44a6142e0ede86d809ba9abdd8a01c381",
                "additions": 345,
                "deletions": 0,
                "committedDate": "2024-09-04T16:08:05Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e6fa3c7a6a7b9618473c895a33902c0848eea011",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2024-09-04T16:09:25Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6SSBzA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705577249/job/29681287628"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6SSDfw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705577543/job/29681288063"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7txA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466658/job/29680922052"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7uQQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466666/job/29680922177"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6SSEhg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705577255/job/29681288326"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7ySA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466658/job/29680923208"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7yTA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466666/job/29680923212"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6SSCkQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705577255/job/29681287825"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7wrw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466658/job/29680922799"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7w7g",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466666/job/29680922862"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7vpw",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466666/job/29680922535"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7vVw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466658/job/29680922455"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6R7zgA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466658/job/29680923520"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6TUEWQ",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10705466666/job/29682369625"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6SSX0A",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/29681293264"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6STrVg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "87d433eb6a7ed0d8da7323ae1d80cea62e241bc0",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2024-09-04T17:07:01Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlvMw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706302160/job/29683707699"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6Ulu5Q",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706302150/job/29683707621"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6Ulkmw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301214/job/29683704987"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UllWA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301247/job/29683705176"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlwBA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706302155/job/29683707908"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlmhQ",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301247/job/29683705477"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6Ulo6Q",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301214/job/29683706089"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlvCw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706302155/job/29683707659"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlnaA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301214/job/29683705704"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6Ulo8A",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301247/job/29683706096"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlnhA",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301247/job/29683705732"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UlmPQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301214/job/29683705405"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U-7VA",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301247/job/29684120404"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6Ulp_A",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706301214/job/29683706364"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UmemQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/29683719833"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6UnZdg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "495de27a6d693ce53c28161a219f1d3d11eeb110",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2024-09-04T17:15:09Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U8_PA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706416556/job/29684088636"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U8_SQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706416558/job/29684088649"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U818Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415605/job/29684086257"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U83Iw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415634/job/29684086563"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U8_DA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706416547/job/29684088588"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U87aQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415605/job/29684087657"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U85Vg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415634/job/29684087126"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U9Akw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706416547/job/29684088979"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U86Bw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415605/job/29684087303"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U84Fg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415634/job/29684086806"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U84Wg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415605/job/29684086874"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U81oQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415634/job/29684086177"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U88zg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415605/job/29684088014"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6V9OLQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10706415634/job/29685141037"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U9dRQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/29684096325"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAG6U-bUA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "dc29370154c93359ea30c14c544677350be4ac03",
                "additions": 11,
                "deletions": 2,
                "committedDate": "2024-09-17T20:26:44Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOge0w",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910574429/job/30281309907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOge3Q",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910574428/job/30281309917"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgXBg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573770/job/30281307910"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgZ6g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573775/job/30281308650"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOggmA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910574489/job/30281310360"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOga6g",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573770/job/30281308906"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOga7A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573775/job/30281308908"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgfhA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910574489/job/30281310084"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgZng",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573770/job/30281308574"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgYyA",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573775/job/30281308360"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgXgw",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573775/job/30281308035"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgYjw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573770/job/30281308303"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOgcCg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573770/job/30281309194"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDO6QZA",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10910573775/job/30281732196"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOg6OA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30281316920"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDOh2nw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "ab4f048643d984b413fee3b3be0290624cf55903",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2024-09-18T07:26:12Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDoDcKQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10919751962/job/30308097065"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHD_759A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927302073/job/30333139444"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDoDbow",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10919752013/job/30308096931"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHD_75cw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927302086/job/30333139315"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDoDZPQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10919751959/job/30308096317"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHD_74WA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927302079/job/30333139032"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRsvQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917521036/job/30300990653"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRsxw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917521034/job/30300990663"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRmxw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520419/job/30300989127"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRoCw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520420/job/30300989451"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRtvg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917521047/job/30300990910"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDoDWqg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10919751962/job/30308095658"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHD_74Fg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927302073/job/30333138966"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRq8A",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520419/job/30300990192"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRpQw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520420/job/30300989763"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRu4w",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917521047/job/30300991203"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRpzg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520419/job/30300989902"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRqVQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520420/job/30300990037"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRopw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520419/job/30300989607"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRmeg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520420/job/30300989050"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhRsPA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520419/job/30300990524"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhp3nQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10917520420/job/30301386653"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhR-zw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30300995279"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHDhTPOA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "0ca3c48d457c747b7ed4f2a1ecbe7ede349f58cc",
                "additions": 12,
                "deletions": 10,
                "committedDate": "2024-09-18T17:40:12Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAFAVg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927348460/job/30333288534"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEbaoUQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10937031554/job/30361954385"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHE1Bmrw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10945181478/job/30388807343"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRAe5Q",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955048164/job/30418149093"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRM3IA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955116942/job/30418351904"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFS5eVw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955696173/job/30420131415"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFTMSkg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955794952/job/30420439698"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAE-ng",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927348480/job/30333288094"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEbalyA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10937031575/job/30361953736"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHE1Bkdg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10945181454/job/30388806774"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRAe5g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955048169/job/30418149094"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRM00g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955116928/job/30418351314"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFS5e9g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955696180/job/30420131574"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFTMT_w",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955794948/job/30420440063"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAE-6A",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927348467/job/30333288168"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEbalJw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10937031558/job/30361953575"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHE1Bkiw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10945181460/job/30388806795"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRAe_g",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955048159/job/30418149118"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRM0-Q",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955116952/job/30418351353"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFS5e7Q",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955696184/job/30420131565"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFTMTtA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955794950/job/30420439988"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEKpQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344404/job/30333274789"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEJ9A",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344403/job/30333274612"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEGFg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344106/job/30333273622"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEIKA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344102/job/30333274152"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAELhw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344412/job/30333275015"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAE-gg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927348460/job/30333288066"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEbamSQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10937031554/job/30361953865"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHE1BkVw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10945181478/job/30388806743"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRAgbw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955048164/job/30418149487"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFRM00Q",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955116942/job/30418351313"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFS5gBw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955696173/job/30420131847"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFTMUnw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10955794952/job/30420440223"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEJjQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344106/job/30333274509"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEJnQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344102/job/30333274525"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEKZw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344412/job/30333274727"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEIHA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344106/job/30333274140"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEFmg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344102/job/30333273498"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEHKw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344106/job/30333273899"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEG5A",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344102/job/30333273828"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAELVg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344106/job/30333274966"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAbStA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10927344102/job/30333653684"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAEk9g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30333281526"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHEAH1gg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "32069b9ca6e786b150f8f6d98f4550c8f5766b83",
                "additions": 28,
                "deletions": 20,
                "committedDate": "2024-09-20T17:14:12Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHM2vBoQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11129724613/job/30927471009"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt6IFw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193801765/job/31119542295"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt85XA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193822952/job/31119587676"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt_C0g",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193839463/job/31119622866"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8YeLA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200708053/job/31134719532"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8hzTg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200773504/job/31134872398"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHM2u6sw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11129724617/job/30927469235"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt6Hdw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193801744/job/31119542135"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt84zg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193822953/job/31119587534"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt_Cxw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193839458/job/31119622855"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8Ydgg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200708058/job/31134719362"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8hyow",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200773503/job/31134872227"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHM2u50w",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11129724614/job/30927469011"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt6HhA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193801745/job/31119542148"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt85WA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193822968/job/31119587672"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt_CZQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193839460/job/31119622757"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8YdWw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200708057/job/31134719323"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8hy3Q",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200773501/job/31134872285"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsMjQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963492502/job/30445079693"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsM_Q",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963492499/job/30445079805"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsGRw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491936/job/30445078087"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsGcw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491942/job/30445078131"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsMVQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963492500/job/30445079637"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHM2u6qQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11129724613/job/30927469225"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt6I0w",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193801765/job/31119542483"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt84mQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193822952/job/31119587481"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHPt_Ccw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11193839463/job/31119622771"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8Ydvw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200708053/job/31134719423"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8hy1g",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200773504/job/31134872278"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsJmg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491936/job/30445078938"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsJ-A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491942/job/30445079032"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsORw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963492500/job/30445080135"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsHcA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491936/job/30445078384"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsHeA",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491942/job/30445078392"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsImQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491936/job/30445078681"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsIzA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491942/job/30445078732"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqsLDA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491936/job/30445079308"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFroNGw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10963491942/job/30446062875"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFqseDw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30445084175"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHFquXCw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "8a184eb8f42f2dc104ce2836e16f82e6b2cc88ff",
                "additions": 44,
                "deletions": 56,
                "committedDate": "2024-10-05T14:25:11Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d887bbecd17c0cd59d79aa7e80fec9f37681aba4",
                "additions": 71128,
                "deletions": 26821,
                "committedDate": "2024-10-05T14:26:12Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c602b0dbaaf68be2c80389a4ba14bfadd534130a",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2024-10-05T15:43:24Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "300dd32c1d2239f374502b54655758af3e555095",
                "additions": 1,
                "deletions": 4,
                "committedDate": "2024-10-06T09:36:01Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8qdYA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200833563/job/31135014240"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8tTBw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200854573/job/31135060743"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wKZA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200874170/job/31135107684"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8qdBQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200833566/job/31135014149"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8tTAQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200854572/job/31135060737"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wJ9Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200874165/job/31135107573"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8qdOg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200833562/job/31135014202"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8tTCw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200854570/job/31135060747"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wKBg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200874169/job/31135107590"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iLzA",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776727/job/31134878668"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iD3g",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200775599/job/31134876638"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iD3A",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200775600/job/31134876636"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iMYg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776730/job/31134878818"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iL1Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776732/job/31134878677"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iD4w",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200775601/job/31134876643"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8qc7Q",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200833563/job/31135014125"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8tSwA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200854573/job/31135060672"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wJ_g",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200874170/job/31135107582"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iMqQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776730/job/31134878889"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iMhg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776732/job/31134878854"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iEUw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200775601/job/31134876755"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iMMQ",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776732/job/31134878769"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iL9A",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776730/job/31134878708"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8yP4g",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776732/job/31135141858"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iM_Q",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200776730/job/31134878973"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iK1g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31134878422"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8iN-A",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "79ead1e9f15e4feeb2d6eacf4d9deadc83df76e5",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2024-10-06T09:47:51Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d623f29dd91621651192fb8faf5a41cee034d38f",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2024-10-06T09:48:28Z",
                "author": {
                  "name": "Salvatore Mercuri",
                  "email": "smercuri@ed.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wXFw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875709/job/31135110935"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wXKA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875712/job/31135110952"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wV-g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110650"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wWUg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135110738"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wXMA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875713/job/31135110960"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wWQA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110720"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wWDg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135110670"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wXcQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875713/job/31135111025"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wWiw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110795"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wWlQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135110805"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wW0w",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110867"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP9jvuA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135952824"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wc6g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31135112426"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHP8wgTw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-09-04T16:17:01Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Field/Subfield.lean",
              "additions": 7,
              "deletions": 0
            },
            {
              "path": "Mathlib/Analysis/Normed/Field/Basic.lean",
              "additions": 19,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/NumberField/Completion.lean",
              "additions": 306,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/NumberField/Embeddings.lean",
              "additions": 14,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Algebra/UniformRing.lean",
              "additions": 5,
              "deletions": 0
            }
          ]
        },
        "headRefName": "NumberFieldCompletion",
        "headRefOid": "d623f29dd91621651192fb8faf5a41cee034d38f",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c56a3KR",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "name": "t-number-theory"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "name": "t-algebra"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "name": "new-contributor"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6KDJ_u",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-19T16:35:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LhSPm",
              "body": "This is an excellent PR, and I am more and more in favour of adopting it. Nevertheless, I would suggest that the general description about `WithAbs` is moved in the general file about normed fields (in `Analysis/Normed/Field/Basic` or whereabouts) and only results pertaining to number fields (and infinite places) stay here.\n\nI am stopping halfway of the `Completion`  file (having checked all the others), right at the beginning of the `NumberField.InfinitePlace.Completion` namespace.",
              "state": "COMMENTED",
              "author": {
                "login": "faenuccio"
              },
              "submittedAt": "2024-10-01T16:41:37Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 16483,
        "potentialMergeCommit": {
          "oid": "97ccb50b059961ff5e16236aec4449f64b952057"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6J0Qyt",
              "body": "Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-18T09:50:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6J4vvZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-09-18T17:37:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6J4xS5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-09-18T17:40:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6J-D6s",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-19T08:11:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6KDJ_u",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-19T16:35:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6KIeWC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-09-20T07:26:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6KIguD",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "faenuccio"
              },
              "submittedAt": "2024-09-20T07:31:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6KI45X",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-09-20T08:14:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6KI8_A",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "faenuccio"
              },
              "submittedAt": "2024-09-20T08:21:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LhSPm",
              "body": "This is an excellent PR, and I am more and more in favour of adopting it. Nevertheless, I would suggest that the general description about `WithAbs` is moved in the general file about normed fields (in `Analysis/Normed/Field/Basic` or whereabouts) and only results pertaining to number fields (and infinite places) stay here.\n\nI am stopping halfway of the `Completion`  file (having checked all the others), right at the beginning of the `NumberField.InfinitePlace.Completion` namespace.",
              "state": "COMMENTED",
              "author": {
                "login": "faenuccio"
              },
              "submittedAt": "2024-10-01T16:41:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MDAO1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-05T14:02:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MDArV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-05T14:05:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MDA1m",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-05T14:07:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MGaWO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-06T09:25:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MGauh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-06T09:35:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MGbKU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-06T09:47:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MGbT1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-06T09:50:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MGbdw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "smmercuri"
              },
              "submittedAt": "2024-10-06T09:54:48Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5pL96M",
                    "body": "```suggestion\r\ndef WithAbs {R S : Type*} [Semiring R] [OrderedSemiring S] : AbsoluteValue R S → Type _ := fun _ => R\r\n```\r\nAnd similarly elsewhere.",
                    "createdAt": "2024-09-18T09:43:10Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pOtTA",
                    "body": "Done!",
                    "createdAt": "2024-09-18T17:40:35Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5pL_fb",
                    "body": "Why not making this a `def`, without using `WithAbs`? (It should be in some other file I think).",
                    "createdAt": "2024-09-18T09:44:36Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pOsSM",
                    "body": "Do you mean doing something like the following? \r\n\r\n```\r\ndef normedRing {R : Type*} [Ring R] (v : AbsoluteValue R ℝ) : NormedRing R where \r\n  dist_eq _ _ := rfl\r\n  dist_self x := by simp only [sub_self, MulHom.toFun_eq_coe, AbsoluteValue.coe_toMulHom, map_zero]\r\n  dist_comm := v.map_sub\r\n  dist_triangle := v.sub_le\r\n  norm_mul x y := (v.map_mul x y).le\r\n  eq_of_dist_eq_zero := by simp only [MulHom.toFun_eq_coe, AbsoluteValue.coe_toMulHom,\r\n    AbsoluteValue.map_sub_eq_zero_iff, imp_self, implies_true]\r\n\r\ninstance {R : Type*} [Ring R] (v : AbsoluteValue R ℝ) : NormedRing (WithAbs v) := \r\n  letI : Ring (WithAbs v) := inferInstanceAs (Ring R)\r\n  normedRing v\r\n```\r\n\r\nand placing the `normedRing` `def` in an `AbsoluteValue` related file?",
                    "createdAt": "2024-09-18T17:37:11Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pSKs0",
                    "body": "Yes, you can call this something like `AbsoluteValue.normedRing` so people can write `v.normedRing`. But it is just an idea, I am not sure it will make things easier.",
                    "createdAt": "2024-09-19T08:11:27Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pVLNa",
                    "body": "It seems to me that the situation is analogous to [Valuation](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Valuation/Basic.html#Valuation)[Valuation](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Valuation/Basic.html#Valuation) and [Valued](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued)[Valued](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued). It seems that mathlib's strategy is to use `Valuation.mk` to turn a valuation into an instance of `Valued` (something you can do locally in a file) and then play with it. I think that here the situation is the same, with a valuation replaced by an absolute value and `Valued` replaced by `NormedRing`.",
                    "createdAt": "2024-09-19T16:35:11Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pY1s6",
                    "body": "Yes, this situation is analogous to the non-Archimedean case. Actually, in my original approach in #13577  I used the model of [`Valued`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued) and [`HeightOneSpectrum.adicCompletion`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/DedekindDomain/AdicValuation.html#IsDedekindDomain.HeightOneSpectrum.adicCompletion). This worked fine, but then I needed to use either lots of `@`s or `letI := v.normedField`s everywhere to explicitly tell the system which uniform space structure I needed. The type synonym approach of `WithAbs` lets the inference system take care of this, so it seems a bit neater to me, but we can keep `WithAbs` and its instances while abstracting the `normedRing` definitions to an `AbsoluteValue` file/namespace as you suggest. I will take a look!",
                    "createdAt": "2024-09-20T07:26:14Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pY3Oq",
                    "body": "Oh, this is strange and it might showcase some deficiency in the `Valued` API. Have you tried there to define a `local instance` of uniform space using `v.normedField`? I do have the feeling that having both valuations and absolute values (that are the same gadget, after all) is a problem for the library. Or do you find any advantage of using the latter rather than the former (beyond the problem that `InfinitePlaces` are defined using `AbsoluteValue` but this can be refactored)?",
                    "createdAt": "2024-09-20T07:31:19Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pZGQ2",
                    "body": "I think `local instance` runs into similar issues. In addition, it's not only the uniform space instances I need to indicate but also metric space and distance instances in many results as well. No particular advantage but, from what I understand, the `Valuation` class represents non-Archimedean norms only so I could not use them for this work. ",
                    "createdAt": "2024-09-20T08:14:31Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5pZI_n",
                    "body": "Yes, that's true.",
                    "createdAt": "2024-09-20T08:21:25Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5pMBOU",
                    "body": "It is probably a good idea to give a more useful name to `instNormedFieldWithAbs` if you want to use it.",
                    "createdAt": "2024-09-18T09:48:35Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5pMBbi",
                    "body": "It is maybe better to make it an `abbrev` or something.",
                    "createdAt": "2024-09-18T09:49:10Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qR-yd",
                    "body": "\n```suggestion\ntheorem fieldRange_eq_top_iff {f : K →+* L} :\n```",
                    "createdAt": "2024-10-01T15:39:55Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSBIh",
                    "body": "\n```suggestion\ndef toNormedField {K : Type*} [Field K] (v : AbsoluteValue K ℝ) : NormedField K where\n```",
                    "createdAt": "2024-10-01T15:46:39Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSBYH",
                    "body": "Can you add this declaration to the docstring? Also, it does not determine a class, rather a term in the class. So I would say that \"it determines a `NormedField` instance\" or (probably better) a \"`NormedField` structure\".",
                    "createdAt": "2024-10-01T15:47:19Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSC6Q",
                    "body": "Is it really an instance? Or do you mean \"its own `UniformSpace` structure\"?",
                    "createdAt": "2024-10-01T15:51:46Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qofum",
                    "body": "I think it's an instance -- `UniformSpace` is a class and through `v.1.normedField` we obtain a `UniformSpace` instance (I imagine using `PseudoMetricSpace.toUniformSpace`).",
                    "createdAt": "2024-10-06T09:47:01Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSDXg",
                    "body": "the sentence is a bit strange, it seems that the semiring depends on an absolute value, whereas you mean the type synonim.",
                    "createdAt": "2024-10-01T15:53:02Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSFi2",
                    "body": "I undestand your idea of \"equipping\" but probably a lot of back-and-forth arose from this somewhat too short explanation. A type synonim cannot really \"equip\" a type with something, and you are not really explaining here how it is defined (and why). In particular, why don't you call it `WithAbsRing`?",
                    "createdAt": "2024-10-01T15:59:11Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qoeqk",
                    "body": "Thanks! I agree the \"equipping\" here does not really capture the idea behind using the type synonym. I have expanded here. \r\n\r\nI think I'm not calling it `WithAbsRing` (or I guess that should really be `WithAbsSemiring`) because `Semiring` is required by `AbsoluteValue` and since this synonym aliases the lowest required class for this dependent synonym it seems unambiguous to me -- also see [`WithIdeal`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Nonarchimedean/AdicTopology.html#WithIdeal) which is not called `WithIdealRing` or `WithIdealCommRing` (although this is technically a class rather than a synonym, so I'm not sure if the same naming convention applies). If we were aliasing a `Field` or something else I think I would agree with you on the naming.",
                    "createdAt": "2024-10-06T09:35:49Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSFn1",
                    "body": "\n```suggestion\n - `AbsoluteValue.completion` : the uniform space completion of a field `K` equipped with a real\n```",
                    "createdAt": "2024-10-01T15:59:24Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSGBq",
                    "body": "\n```suggestion\nnumber field, embeddings, infinite places, completion, absolute value\n```",
                    "createdAt": "2024-10-01T16:00:35Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSGT0",
                    "body": "Once you'll have expanded the docstring, you can copy-paste here the relevant explanation/description of this construction.",
                    "createdAt": "2024-10-01T16:01:33Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSMj6",
                    "body": "Do you need it here? It seems to me that you just use it below when speaking about completion.",
                    "createdAt": "2024-10-01T16:18:07Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qm_an",
                    "body": "Not necessarily, but I think it should be in the `WithAbs` namespace. Have moved it to the top.",
                    "createdAt": "2024-10-05T14:02:30Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSN4S",
                    "body": "In the four declarations below, I would be tempted to replace `..._of_comp` by `..._of_isComp`; the assumption is that `v` is a composition, not that if you compose it with a function then something happens. Can you check similar other examples in the library?",
                    "createdAt": "2024-10-01T16:22:24Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qm_v4",
                    "body": "I think `isComp` should only be used if there is an `IsComp` structure/class that we are directly using. We could use `..._of_is_comp`, but it seems like other examples use just `_of_comp` -- see [`LinearIndependent.of_comp`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent.of_comp)",
                    "createdAt": "2024-10-05T14:05:21Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSOdT",
                    "body": "If you make it for a `NormedRing`, is there a chance that in the case of fields everything goes smoothly or do you need to re-do everything? In the first case, it is worth generalising it, but in the second case of course no, leave it as it is.",
                    "createdAt": "2024-10-01T16:24:14Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qodrT",
                    "body": "This is possible, but it will require a bit of extra work. Further down in the file I want to show that the completion of a number field at an infinite place is indeed a field, so I'm using [this](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/UniformField.html#UniformSpace.Completion.instField), which requires a `TopologicalDivisionRing` instance on `K`. This comes for free if `K` is a `NormedField` but not if `K` is a `NormedRing`. On the other hand, for the non-Archimedean case, `Valued` class carries a [`TopologicalDivisionRing`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuedField.html#Valued.topologicalDivisionRing) instance so it all works smoothly using `Valued` there.",
                    "createdAt": "2024-10-06T09:25:43Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSPtP",
                    "body": "Why do you spell the instances below as such? They can automatically be inferred by type-class inference (if you replace the proof by `inferInstance`, lean is happy).",
                    "createdAt": "2024-10-01T16:28:26Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qm_1A",
                    "body": "Yes these can mostly be removed, except `Coe`. ",
                    "createdAt": "2024-10-05T14:07:41Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSQAs",
                    "body": "\n```suggestion\n`L`, then we can extend that embedding to an embedding on the completion `v.completion →+* L`. -/\n```",
                    "createdAt": "2024-10-01T16:29:29Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSQIM",
                    "body": "\n```suggestion\nthen the extended embedding `v.completion →+* L` preserves distances. -/\n```",
                    "createdAt": "2024-10-01T16:29:56Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSQbw",
                    "body": "\n```suggestion\n/-- If the absolute value of a normed field factors through an embedding into another normed field \nthat is locally compact, then the completion of the first normed field is also locally compact. -/\n```",
                    "createdAt": "2024-10-01T16:31:03Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSRuS",
                    "body": "I believe that these result really belong to the main file concerning infinite places, they do not have much to do with completions, no?",
                    "createdAt": "2024-10-01T16:35:35Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qogGj",
                    "body": "Agreed, I moved them.",
                    "createdAt": "2024-10-06T09:50:55Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qSS_P",
                    "body": "Can you add a couple of lines as \"Implementation Details\" in the docstring, saying why you need to re-do the work passing from Absolute Values to Infinite Places? Have you tried to define a coercion instance from the second to the first to see if this makes it possible to write replace all the `v.1`'s simply by `v` (for an InfinitePlace `v`), so that the instances below are found automatically? A wonderful example of a file with a nice \"Implementation Detail\" section is Mathlib.MeasureTheory.Function.LpSpace.",
                    "createdAt": "2024-10-01T16:40:09Z",
                    "author": {
                      "login": "faenuccio"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qogey",
                    "body": "Actually, the instances are already found automatically (except for `Algebra`) so I have removed them. Defining a coercion from `InfinitePlace` to `AbsoluteValue` does not seem to make much difference, and I think the duplication is mostly now gone. Let me know if you still think an \"Implementation Detail\" section would be helpful (perhaps the `WithAbs` explanation could go there too if so)",
                    "createdAt": "2024-10-06T09:54:48Z",
                    "author": {
                      "login": "smmercuri"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ3NTY4NTUz",
              "login": "smmercuri"
            },
            {
              "id": "MDQ6VXNlcjY1MDgwMTQ0",
              "login": "faenuccio"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wXFw",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875709/job/31135110935"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wXKA",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875712/job/31135110952"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wV-g",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110650"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wWUg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135110738"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wXMA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875713/job/31135110960"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wWQA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110720"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wWDg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135110670"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wXcQ",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875713/job/31135111025"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wWiw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110795"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wWlQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135110805"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wW0w",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875621/job/31135110867"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP9jvuA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11200875623/job/31135952824"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wc6g",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31135112426"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHP8wgTw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16483&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: the completion of a number field at an infinite place",
        "updatedAt": "2024-10-06T13:03:52Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/16483",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6VW2yLzwAAAANKdIB9",
              "createdAt": "2024-09-04T16:17:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6VW2yLzwAAAANKdICD",
              "createdAt": "2024-09-04T16:17:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6VW2yLzwAAAANKdIpR",
              "createdAt": "2024-09-04T16:17:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
                "name": "new-contributor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6K2Srb",
              "createdAt": "2024-09-04T16:17:49Z",
              "body": "### PR summary [d623f29dd9](https://github.com/leanprover-community/mathlib4/pull/16483/commits/d623f29dd91621651192fb8faf5a41cee034d38f)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.NumberTheory.NumberField.Completion`|2018|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ WithAbs`\n`+ abs_eq_comp`\n`+ abs_of_isReal_eq_comp`\n`+ bijective_extensionEmbedding_of_isComplex`\n`+ bijective_extensionEmbedding_of_isReal`\n`+ closedEmbedding_extensionEmbedding_of_comp`\n`+ dist_of_comp`\n`+ extensionEmbedding`\n`+ extensionEmbedding_coe`\n`+ extensionEmbedding_dist_eq_of_comp`\n`+ extensionEmbedding_of_comp`\n`+ extensionEmbedding_of_comp_coe`\n`+ extensionEmbedding_of_isReal`\n`+ extensionEmbedding_of_isReal_coe`\n`+ extensionHom_coe`\n`+ fieldRange_eq_top_iff`\n`+ instance : Algebra K v.completion`\n`+ instance : Coe K v.completion`\n`+ instance : Inhabited (WithAbs v) := ⟨0⟩`\n`+ instance : NormedField v.completion`\n`+ isClosed_image_extensionEmbedding`\n`+ isClosed_image_extensionEmbedding_of_isReal`\n`+ isometryEquiv_complex_of_isComplex`\n`+ isometryEquiv_real_of_isReal`\n`+ isometry_extensionEmbedding`\n`+ isometry_extensionEmbedding_of_comp`\n`+ isometry_extensionEmbedding_of_isReal`\n`+ isometry_of_comp`\n`+ mem_fieldRange_self`\n`+ normedField`\n`+ pseudoMetricSpace_induced_of_comp`\n`+ ringEquiv_complex_of_isComplex`\n`+ ringEquiv_real_of_isReal`\n`+ subfield_ne_real_of_isComplex`\n`+ surjective_extensionEmbedding_of_isComplex`\n`+ surjective_extensionEmbedding_of_isReal`\n`+ toNormedField`\n`+ uniformInducing_of_comp`\n`+ uniformSpace_eq_comap_of_comp`\n`++ completion`\n`++ locallyCompactSpace`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5U26s6",
              "createdAt": "2024-09-04T18:03:49Z",
              "source": {
                "id": "PR_kwDOFcwZ1c56bgpu",
                "title": "feat: the adele ring of a number field",
                "url": "https://github.com/leanprover-community/mathlib4/pull/16485"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6VW2yLzwAAAANUnbxM",
              "createdAt": "2024-09-18T09:38:43Z",
              "assignee": {
                "id": "MDQ6VXNlcjMyNDkwNTMy",
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6J0Qyt",
              "createdAt": "2024-09-18T09:43:10Z",
              "body": "Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6MnHrY",
              "createdAt": "2024-09-18T17:44:55Z",
              "body": "> Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n\r\nThere was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6MrmWQ",
              "createdAt": "2024-09-19T07:48:08Z",
              "body": "> > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> \r\n> There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n\r\nWell, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M2Oxe",
              "createdAt": "2024-09-20T07:33:47Z",
              "body": "> > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > \r\n> > \r\n> > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> \r\n> Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n\r\nYes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me,  although I'm happy to discuss further!",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M2P9e",
              "createdAt": "2024-09-20T07:36:51Z",
              "body": "> > > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > > \r\n> > > \r\n> > > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> > \r\n> > \r\n> > Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n> \r\n> Yes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me, although I'm happy to discuss further!\r\n\r\n\r\nWell, we certainly prefer neat code ;-) So I'd like to understand better if your `@` business can be avoided by some fine use of the tools at our disposal, of there is really something deep going on. I do not have anything agains your `WithAbs` approach, but if a unified one can be used for both the archimedean and the non-archimedean situation, that would be preferable. ",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M2SIY",
              "createdAt": "2024-09-20T07:42:07Z",
              "body": "> > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> \r\n> There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n\r\nBTW Can you link to the specific point of the long thread of discussions in that PR where this has been discussed? Just to avoid you repeating old arguments...",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M2oCu",
              "createdAt": "2024-09-20T08:14:17Z",
              "body": "> > > > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > > > \r\n> > > > \r\n> > > > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> > > \r\n> > > \r\n> > > Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n> > \r\n> > \r\n> > Yes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me, although I'm happy to discuss further!\r\n> \r\n> Well, we certainly prefer neat code ;-) So I'd like to understand better if your `@` business can be avoided by some fine use of the tools at our disposal, of there is really something deep going on. I do not have anything agains your `WithAbs` approach, but if a unified one can be used for both the archimedean and the non-archimedean situation, that would be preferable.\r\n\r\nIt seems to me that it helps to think about `v`-adic valuations as discrete integer-valued multiplicative valuations, instead of real absolute values, since e.g. then we don't need to make a choice of base (probably there are better reasons!). But, since this is not possible for the infinite places, to fully unify them we could turn a `v`-adic valuation into a `v`-adic absolute value, then we might use `AbsoluteValue.completion` for both the finite and infinite places. But that sounds like a lot of refactoring for the `adicCompletion` API, and I imagine there's a lot of material from the `Valued` API that is made use of for `adicCompletion` and is not available for `AbsoluteValue`. ",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M2q1u",
              "createdAt": "2024-09-20T08:17:21Z",
              "body": "> > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > \r\n> > \r\n> > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> \r\n> BTW Can you link to the specific point of the long thread of discussions in that PR where this has been discussed? Just to avoid you repeating old arguments...\r\n\r\nOh yes sorry, I think around [Andrew's suggestion](https://github.com/leanprover-community/mathlib4/pull/13577#issuecomment-2158320382) although looking back it seems like the main point of agreement was abstracting to `AbsoluteValue` rather than the use of `WithAbs` itself.",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M3r99",
              "createdAt": "2024-09-20T10:35:29Z",
              "body": "> > > > > Have you discussed `WithAbs` on Zulip? It seems a reasonable idea, but maybe we can came up with something better.\r\n> > > > \r\n> > > > \r\n> > > > There was some discussion about introducing `WithAbs` on my older PR #13577 (which did not have `WithAbs` to begin with, and its introduction helped a lot). Do you think this is worth discussing further on Zulip?\r\n> > > \r\n> > > \r\n> > > Well, perhaps can you at least explain here and in the doc of the file what the main idea is? Can't you simply make do with the `AbsoluteValue R $\\mathbb{R}$` assumption?\r\n> > \r\n> > \r\n> > Yes let me update the description for this PR and add more detail in the file header. It is possible to do this without `WithAbs` and using only `(v : AbsoluteValue R ℝ)`. Then we might have something like `def AbsoluteValue.normedField : NormedField K ...`. This is similar to my original approach in #13577. In that case then we either need to use lots of `letI := v.normedField` or `@`s to tell the inference system which uniform space instances we mean (at least for the `AbsoluteValue` completion part). The type synonym approach of `WithAbs` allows the inference system take care of this, so it seems a bit neater to me, although I'm happy to discuss further!\r\n> \r\n> Well, we certainly prefer neat code ;-) So I'd like to understand better if your `@` business can be avoided by some fine use of the tools at our disposal, of there is really something deep going on. I do not have anything agains your `WithAbs` approach, but if a unified one can be used for both the archimedean and the non-archimedean situation, that would be preferable.\r\n\r\nOh no, you're right. Forget my suggestion to use `Valuation`. But I guess that the main point we were trying to make with @riccardobrasca is that in the same vein as [Valued.mk'](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued.mk') associates a valued structure to a Valuation, it seems that simply creating a `NormedRing.mk` that takes an absolute value and creates a normed ring might be a good solution. At least, it works very well in the nonarchimedean setting, _mutatis mutandis._ The rest of your PR would be hardly modified, I guess.",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6M6tlx",
              "createdAt": "2024-09-20T17:35:35Z",
              "body": "I think I understand! In the latest commit I have done the following:\r\n- Defined `def normedField` inside the `AbsoluteValue` namespace in a separate file that takes an `AbsoluteValue` and returns a `NormedField` class -- I think this is neater and makes the `NormedField` construction available for other usage, so thanks for the suggestion @riccardobrasca !\r\n- Removed the `NormedRing` and `NormOneClass` instances. I did not replace these with `def` versions in the `AbsoluteValue` namespace, because I realised I don't actually need them. Let me know if you think I should add them anyway for completeness -- I guess `NormedRing` is the lowest possible level for `AbsoluteValue`.\r\n- I have kept the usage of `WithAbs` and included a paragraph in the documentation to explain a bit about this approach. If we remove it then we will need to use `@` (like the [non-Archimedean case](https://github.com/leanprover-community/mathlib4/blob/6dcd0d943385f315b956fc76968c842a3ad4072c/Mathlib/RingTheory/DedekindDomain/AdicValuation.lean#L365)) or `letI := ...`, which I had in the old PR. I do not know personally which is preferred, but the type synonym leads to shorter constructions I guess!\r\n- Also updated the PR description.",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6VW2yLzwAAAANXOodX",
              "createdAt": "2024-09-21T08:29:39Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjY1MDgwMTQ0",
                "login": "faenuccio"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LhSPm",
              "createdAt": "2024-10-01T15:39:55Z",
              "body": "This is an excellent PR, and I am more and more in favour of adopting it. Nevertheless, I would suggest that the general description about `WithAbs` is moved in the general file about normed fields (in `Analysis/Normed/Field/Basic` or whereabouts) and only results pertaining to number fields (and infinite places) stay here.\n\nI am stopping halfway of the `Completion`  file (having checked all the others), right at the beginning of the `NumberField.InfinitePlace.Completion` namespace.",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OUTNg",
              "createdAt": "2024-10-02T05:57:52Z",
              "body": "On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n\r\nPerhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n\r\n\r\n\r\nAny thoughts on this @riccardobrasca ?",
              "author": {
                "login": "faenuccio"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OU0pw",
              "createdAt": "2024-10-02T07:41:13Z",
              "body": "> On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n> \r\n> Perhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n> \r\n> Any thoughts on this @riccardobrasca ?\r\n\r\nI think that in Lean4 we prefer structure (even with only one field given by a term of type `R`) to avoid type leakage (meaning that sometimes Lean still see instances of the first type). Anyway my concern was mainly about not having a different solution for valuations and absolute values.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OgGC8",
              "createdAt": "2024-10-03T08:04:43Z",
              "body": "> On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n> \r\n> Perhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n> \r\n> Any thoughts on this @riccardobrasca ?\r\n\r\nThanks for the review! Yes I think the structure approach would also work, so I will give it a try ",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6VW2yLzwAAAANhcFCv",
              "createdAt": "2024-10-04T13:53:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OwbbB",
              "createdAt": "2024-10-05T13:32:07Z",
              "body": "> On top of all my previous comments, I have been thinking that perhaps another solution instead of your type alias would be to define a structure (probably not upgraded to a class, but I would expand on this at a later stage) `WithAbsRing` with two fields: a ring and an absolute value on it. Have you tried this idea? I think it would make your life easier both when trying to construct a sub-WithAbsRing from a given one; and when constructing a `WithAbsRing` from an infinite place, by doing `WithAbsRing.mk K v.1` (for `K` the field and `v` the infinite place). All your duplicated code with the `inferInstanceAs` would be automatically OK, once you prove your results (like those about an absolute value that factors through a complex embedding), and attach to an infinite place a term of this structure as above.\r\n> \r\n\r\nI'm not sure if this is what you had in mind, but I tried this as the following\r\n```\r\nstructure AbsoluteValued (R S : Type*) [Semiring R] [OrderedSemiring S]\r\n    where\r\n  abs : AbsoluteValue R S\r\n  value : R\r\n```\r\nBut it's not clear to me where to go from here with such a structure. I think `class` might be better because it should extend `Semiring` and `NormedField`, so that it has access to these instances I think? I have not interacted much with `structure` so this is probably my ignorance at play here. \r\n\r\nI think it might be helpful to make a more concrete analogy to the non-Archimedean case to clarify the options here. In the non-Archimedean case we want to use the [`Valued`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued) class which carries the `UniformSpace` structure we are interested in, but this has a distinguished valuation whereas we have multiple valuations. So there is a constructor [`Valued.mk'`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Valued/ValuationTopology.html#Valued.mk') which constructs the `Valued` instance when there is no preferred valuation/uniform structure. Then a `def` is made for [`adicValued`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/DedekindDomain/AdicValuation.html#IsDedekindDomain.HeightOneSpectrum.adicValued) which carries these `Valued` instances. In particular, [`adicCompletion`](https://github.com/leanprover-community/mathlib4/blob/3ca1060d7e48260d1b1b7a0733f887e455455226/Mathlib/RingTheory/DedekindDomain/AdicValuation.lean#L365-L366) calls `adicValued.toUniformSpace` using the `@` operator.\r\n\r\nNow for the Archimedean case, the [`NormedField`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Normed/Field/Basic.html#NormedField) class plays the role of `Valued`. Again this has a distinguished norm, so we want a way of creating an instance for non-distinguished norms (or absolute values in this case). I think there are two main options here: (1) in analogy to non-Arch. case we create a `NormedField.mk'` constructor taking an absolute value and giving a `NormedField` instance, assign this to a `def`, then use `@` operators as appropriate; (2) create a type synonym that depends on absolute values, in order to assign the `NormedField` instance as in this PR. It's not clear to me where a new structure fits in to these options. \r\n\r\nBy the way, I did not realise this but those `inferInstanceAs` can actually just be deleted with the type synonym approach as well (except for `Coe` I think).\r\n\r\n> Perhaps a word about why \"type synonyms\" are raising so much scepticism: there is nothing inherently bad with them, and there are very high chances that your solution is excellent. Nevertheless, they are seldom used in the library, whereas bundling things through `structures` appears everywhere. I have the feeling that your guiding principle here is not really \"create another copy of `R` that I want to call something else than `Ring` for whatever reason\"; rather, to bundle together the underlying ring and an absolute value on it, and we're used to do so with structures. Clearly, \"we're used to...\" is a social thing, and I would be very happy to be convinced that in this case your suggestion is far better; on the other hand, surfing the wave and benefitting of all the infrastructure built around structures (pun not intended) could be useful.\r\n> \r\nI agree with a previous comment that the use of \"equip\" is misleading in the documentation, and I can see where the scepticism is coming from! My guiding principle for using a type synonym is less about \"equipping\" the ring with an absolute value, but really more about providing a mechanism for type class inferencing to handle non-preferential instances without using the `@` operator. So actually I do want to create another copy of a ring, but one that explicitly depends on an absolute value, so that I can sensibly assign instances that depend on absolute values to it. I think I'm arguing that the `NormedField` and `Valued` classes provide the \"bundling\" mechanisms, and the `Valued.mk'` and `WithAbs` are two different ways of making that bundling mechanism non-preferential. There is at least some precedence for doing this with type synonyms in [WithLp](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Normed/Lp/WithLp.html#The-WithLp-type-synonym), which does something very similar for the $L^p$ norm -- maybe it would be helpful to separate `WithAbs` into a more developed API like this?",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OwdQn",
              "createdAt": "2024-10-05T13:57:17Z",
              "body": "Actually, this [`WithIdeal`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Nonarchimedean/AdicTopology.html#WithIdeal) class looks very relevant -- maybe the \"structure\" approach would indeed work if we have it as a class.",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Oxplo",
              "createdAt": "2024-10-06T10:14:23Z",
              "body": "> Actually, this [`WithIdeal`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Nonarchimedean/AdicTopology.html#WithIdeal) class looks very relevant -- maybe the \"structure\" approach would indeed work if we have it as a class.\r\n\r\nHave played around with this idea, and something like this would work:\r\n```\r\nclass WithAbs (R S : Type*) [Semiring R] [OrderedSemiring S] where \r\n  v : AbsoluteValue R S\r\n\r\nvariable {K : Type*} [Field K] [WithAbs K ℝ]\r\n\r\ninstance normedField : NormedField K :=\r\n  v.toNormedField\r\n\r\nabbrev AbsoluteValue.completion := UniformSpace.Completion K\r\n```\r\nI do later run into inference snags when passing from `AbsoluteValue` to `InfinitePlace`, and then something like this is required:\r\n```\r\n/-- The completion of a number field at an infinite place. -/\r\nabbrev InfinitePlace.completion := letI := WithAbs.mk v.1; AbsoluteValue.completion K\r\n```\r\nFor some reason doing `instance : WithAbs K ℝ := WithAbs.mk v.1` before this does not work (probably because it depends on `v`?). I did not go further, but I think from this point on I will have to do a bunch of sign-posting for the inference system to know what's going on. \r\n\r\nStill, I think this would work as a third option. It's maybe less smooth with respect to inferencing than the type synonym approach, but if there are benefits (e.g., type leakage) then we should discuss whether this approach would be better.",
              "author": {
                "login": "smmercuri"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6VW2yLzwAAAANiETKR",
              "createdAt": "2024-10-06T10:15:10Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Ox2g8",
              "createdAt": "2024-10-06T13:03:50Z",
              "body": "Great, thank you so much! I will not have time to dig into this today, but you raised many questions and all of them are interesting, so I will take a little bit to think about all of them and answer properly. It should not take too long.",
              "author": {
                "login": "faenuccio"
              }
            }
          ]
        }
      }
    }
  }
}
